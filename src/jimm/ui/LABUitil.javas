package jimm.ui;

/**
 * Created [02.03.2011, 0:02:36]
 * Develop by Lavlinsky Roman on 2011
 */
public final class LABUitil {

    double L, A, B;

    //public static final double K = 903.3;
    //public static final double E = 0.008856;

    public LABUitil() {
    }

//    // TODO Decay Algorithm
//    double pow(double x, double y) {
//        int den = 1000;
//        int num = (int) (y * den);
//        int s = (num / den) + 1;
//        double z = Double.MAX_VALUE;
//        while (z >= Double.MAX_VALUE) {
//            den -= 1;
//            num = (int) (y * den);
//            s = (num / den) + 1;
//            z = x;
//            for (int i = 1; i < num; i++) z *= x;
//        }
//        double n = x;
//        for (int i = 1; i < s; i++) n *= x;
//        while (n > 0) {
//            double a = n;
//            for (int i = 1; i < den; i++) a *= n;
//            double check1 = a - z;
//            double check2 = z - a;
//            if (check1 < .00001 || check2 > .00001) return n;
//            n *= .999;
//        }
//        return -1.0;
//    }
//

    //    // TODO Natural Logarithm and Euler's

    double pow(double a, double b) {
        boolean gt1 = (Math.sqrt((a - 1) * (a - 1)) > 1);
        int oc = -1;
        int iter = 20;
        double p, x, x2, sumX, sumY;
        if ((b - Math.floor(b)) == 0) {
            p = a;
            for (int i = 1; i < b; i++) p *= a;
            return p;
        }
        x = (gt1) ? (a / (a - 1)) : (a - 1);
        sumX = (gt1) ? (1 / x) : x;
        for (int i = 2; i < iter; i++) {
            p = x;
            for (int j = 1; j < i; j++) p *= x;
            double xTemp = (gt1) ? (1 / (i * p)) : (p / i);
            sumX = (gt1) ? (sumX + xTemp) : (sumX + (xTemp * oc));
            oc *= -1;
        }
        x2 = b * sumX;
        sumY = 1 + x2;
        for (int i = 2; i <= iter; i++) {
            p = x2;
            for (int j = 1; j < i; j++) p *= x2;
            int yTemp = 2;
            for (int j = i; j > 2; j--) yTemp *= j;
            sumY += p / yTemp;
        }
        return sumY;
    }

    // TODO Math.sqrt(n) Alhoritm
//    double pow(double x, double y) {
//        int den = 1024;
//        int num = (int) (y * den);
//        int iterations = 10;
//        double n = Double.MAX_VALUE;
//        while (n >= Double.MAX_VALUE && iterations > 1) {
//            n = x;
//            for (int i = 1; i < num; i++) n *= x;
//            if (n >= Double.MAX_VALUE) {
//                iterations--;
//                den = (int) (den / 2);
//                num = (int) (y * den);
//            }
//        }
//        for (int i = 0; i < iterations; i++) {
//            n = Math.sqrt(n);
//        }
//        return n;
//    }

//    public void ConvertLabToRGB() {
//        ConvertLabToXYZ();
//        ConvertXYZToRGB();
//        System.out.println("ConvertLabToRGB" + Red);
//        System.out.println("ConvertLabToRGB" + Green);
//        System.out.println("ConvertLabToRGB" + Blue);
//    }
//
//    public void ConvertRGBToLab() {
//        ConvertRGBToXYZ();
//        ConvertXYZToLab();
//        System.out.println("ConvertRGBToLab" + L);
//        System.out.println("ConvertRGBToLab" + A);
//        System.out.println("ConvertRGBToLab" + B);
//    }
//
//    void ConvertXYZToRGB() {
//        // TODO COLOR (Observer = 2°, Illuminant = D65)
//        double var_X = X / 100;        //X from 0 to  95.047
//        double var_Y = Y / 100;        //Y from 0 to 100.000
//        double var_Z = Z / 100;        //Z from 0 to 108.883
//
//        double var_R = ConvertXYZComponentToRGB(var_X * 3.2406 + var_Y * -1.5372 + var_Z * -0.4986);
//        double var_G = ConvertXYZComponentToRGB(var_X * -0.9689 + var_Y * 1.8758 + var_Z * 0.0415);
//        double var_B = ConvertXYZComponentToRGB(var_X * 0.0557 + var_Y * -0.2040 + var_Z * 1.0570);
//
//        Red = var_R * 255;
//        Green = var_G * 255;
//        Blue = var_B * 255;
//        System.out.println("ConvertXYZToRGB" + Red);
//        System.out.println("ConvertXYZToRGB" + Green);
//        System.out.println("ConvertXYZToRGB" + Blue);
//    }
//
//    double ConvertXYZComponentToRGB(double component) {
//        if (component > 0.0031308) {
//            component = 1.055 * pow(component, 1 / 2.4) - 0.055;
//        } else {
//            component *= 12.92;
//        }
//        return component;
//    }
//
//    void ConvertRGBToXYZ() {
//        double var_R = ConvertRGBComponentToXYZ(Red / 255/**/);
//        double var_G = ConvertRGBComponentToXYZ(Green / 255);
//        double var_B = ConvertRGBComponentToXYZ(Blue / 255);
//
//        X = ConvertRGBComponentToXYZTwo(var_R) * 100;
//        Y = ConvertRGBComponentToXYZTwo(var_G) * 100;
//        Z = ConvertRGBComponentToXYZTwo(var_B) * 100;
//
//        // TODO COLOR Observer. = 2°, Illuminant = D65
//        X = var_R * 0.4124 + var_G * 0.3576 + var_B * 0.1805;
//        Y = var_R * 0.2126 + var_G * 0.7152 + var_B * 0.0722;
//        Z = var_R * 0.0193 + var_G * 0.1192 + var_B * 0.9505;
//
//        System.out.println("ConvertRGBToXYZ" + X);
//        System.out.println("ConvertRGBToXYZ" + Y);
//        System.out.println("ConvertRGBToXYZ" + Z);
//    }
//
//    double ConvertRGBComponentToXYZ(double component) {
//        if (component > 0.04045) {
//            component = pow((component + 0.055) / 1.055, 2.4);
//        } else {
//            component = component / 12.92;
//        }
//        return component;
//    }
//
//    double ConvertRGBComponentToXYZTwo(double component) {
//        if (component > 0.08) {
//            component = pow((component + 0.16) / 1.16, 3);
//        } else {
//            component = 100 * component / K;
//        }
//        return component;
//    }
//
//    void ConvertLabToXYZ() {
//        double var_Y = L / 10;
//        double var_X = A / 17.5 * L / 10;
//        double var_Z = B / 7 * L / 10;
//
//        Y = var_Y * var_Y;//var_Y ^ 2;
//        X = (var_X + Y) / 1.02;
//        Z = -(var_Z - Y) / 0.847;
//        Z = -(var_Z - Y) / 0.847;
//        System.out.println("ConvertLabToXYZ" + X);
//        System.out.println("ConvertLabToXYZ" + Y);
//        System.out.println("ConvertLabToXYZ" + Z);
//    }
//
//    void ConvertXYZToLab() {
//        double var_X = X / 95.047;          //ref_X =  95.047  Observer= 2°, Illuminant= D65
//        double var_Y = Y / 100.000;          //ref_Y = 100.000
//        double var_Z = Z / 108.883;          //ref_Z = 108.883
//
//        if (var_X > 0.008856) var_X = pow(var_X, 1.0 / 3.0);
//        else var_X = (7.787 * var_X) + (16.0 / 116.0);
//        if (var_Y > 0.008856) var_Y = pow(var_Y, 1.0 / 3.0);
//        else var_Y = (7.787 * var_Y) + (16.0 / 116.0);
//        if (var_Z > 0.008856) var_Z = pow(var_Z, 1.0 / 3.0);
//        else var_Z = (7.787 * var_Z) + (16.0 / 116.0);
//
//        L = (116.0 * var_Y) - 16;
//        A = 500.0 * (var_X - var_Y);
//        B = 200.0 * (var_Y - var_Z);
//    }

    public int ConvertLabToRGB() {
        double vy = (L + 16.0) / 116.0;
        double vx = A / 500.0 + vy;
        double vz = vy - B / 200.0;

        System.out.println("1LAB" + vy);
        System.out.println("1LAB" + vx);
        System.out.println("1LAB" + vz);

        double vx3 = vx * vx * vx;
        double vy3 = vy * vy * vy;
        double vz3 = vz * vz * vz;

        System.out.println("2LAB" + vx3);
        System.out.println("2LAB" + vy3);
        System.out.println("2LAB" + vz3);

        if (vy3 > 0.008856)
            vy = vy3;
        else
            vy = (vy - 16.0 / 116.0) / 7.787;

        if (vx3 > 0.008856)
            vx = vx3;
        else
            vx = (vx - 16.0 / 116.0) / 7.787;

        if (vz3 > 0.008856)
            vz = vz3;
        else
            vz = (vz - 16.0 / 116.0) / 7.787;

        System.out.println("3LAB" + vy);
        System.out.println("3LAB" + vx);
        System.out.println("3LAB  " + vz);

        vx *= 0.95047; //use white = D65
        vz *= 1.08883;

        double vr = (vx * 3.2406 + vy * -1.5372 + vz * -0.4986);
        double vg = (vx * -0.9689 + vy * 1.8758 + vz * 0.0415);
        double vb = (vx * 0.0557 + vy * -0.2040 + vz * 1.0570);

        System.out.println("4LAB  " + vr);
        System.out.println("4LAB  " + vg);
        System.out.println("4LAB  " + vb);


        if (vr > 0.0031308)
            vr = (1.055 * pow(vr, (1.0 / 2.4)) - 0.055);
        else
            vr = 12.92 * vr;

        if (vg > 0.0031308)
            vg = (1.055 * pow(vg, (1.0 / 2.4)) - 0.055);
        else
            vg = 12.92 * vg;

        if (vb > 0.0031308)
            vb = (1.055 * pow(vb, (1.0 / 2.4)) - 0.055);
        else
            vb = 12.92 * vb;

        vr *= 255;
        vg *= 255;
        vb *= 255;

        System.out.println("5LAB  " + vr);
        System.out.println("5LAB  " + vg);
        System.out.println("5LAB  " + vb);

        return (int) (((long) vr & 0xFF) << 16 | ((long) vg & 0xFF) << 8 | ((long) vb) & 0xFF);
    }

    public void ConvertRGBToLab(int rgb) {
        int ir = (rgb >> 16) & 0xff;
        int ig = (rgb >> 8) & 0xff;
        int ib = (rgb) & 0xff;


        double fr = (ir) / 255.0;
        double fg = (ig) / 255.0;
        double fb = (ib) / 255.0;

        if (fr > 0.04045)
            fr = pow((fr + 0.055) / 1.055, 2.4);
        else
            fr = fr / 12.92;

        if (fg > 0.04045)
            fg = pow((fg + 0.055) / 1.055, 2.4);
        else
            fg = fg / 12.92;

        if (fb > 0.04045)
            fb = pow((fb + 0.055) / 1.055, 2.4);
        else
            fb = fb / 12.92;

        // Use white = D65
        double x = fr * 0.4124 + fg * 0.3576 + fb * 0.1805;
        double y = fr * 0.2126 + fg * 0.7152 + fb * 0.0722;
        double z = fr * 0.0193 + fg * 0.1192 + fb * 0.9505;

        double vx = x / 0.95047;
        double vy = y;
        double vz = z / 1.08883;

        //printf("vx:%f vy:%f vz:%f\n", vx, vy, vz);
        if (vx > 0.008856)
            vx = pow(vx, 0.3333);
        else
            vx = (7.787 * vx) + (16.0 / 116.0);

        if (vy > 0.008856)
            vy = pow(vy, 0.3333);
        else
            vy = (7.787 * vy) + (16.0 / 116.0);

        if (vz > 0.008856)
            vz = pow(vz, 0.3333);
        else
            vz = (7.787 * vz) + (16.0 / 116.0);

        L = 116.0 * vy - 16.0;
        A = 500.0 * (vx - vy);
        B = 200.0 * (vy - vz);
        System.out.println("LAB  " + L);
        System.out.println("LAB  " + A);
        System.out.println("LAB  " + B);
    }

//
//    'Referenced by pow24().
//            '00091 {
//            '00092     double y = qn_table[int(x*ROOT_TAB_SIZE )]; // assuming x \in [0, 1]
//            '00093     double Y = y*y;
//            '00094     y = (4.0*y + x/(Y*Y))/5.0;
//            '00095     Y = y*y;
//            '00096     y = (4.0*y + x/(Y*Y))/5.0; // polish twice
//            '00097     return y;
//            '00098 }

//    cbrt(double x)
//    {
//        000
//        82
//        double y = cbrt_table[int(x * ROOT_TAB_SIZE)]; // assuming x \in [0, 1]
//        000
//        83
//        y = (2.0 * y + x / (y * y)) / 3.0;
//        000
//        84
//        y = (2.0 * y + x / (y * y)) / 3.0; // polish twice
//        000
//        85
//        return y;
//        000
//        86
//    }

//
//    public int getRed() {
//        System.out.println("getRed" + Red);
//        System.out.println("getRed" + (int) (long) Red);
//        return (int) (long) Red;
//    }
//
//    public int getGreen() {
//        System.out.println("getGreen" + Green);
//        System.out.println("getGreen" + (int) (long) Green);
//        return (int) (long) Green;
//    }
//
//    public int getBlue() {
//        System.out.println("getBlue" + Blue);
//        System.out.println("getBlue" + (int) (long) Blue);
//        return (int) (long) Blue;
//    }
}
